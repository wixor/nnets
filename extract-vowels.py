#!./python

import sys, itertools
import numpy as np
from common import *

mean_mel_shape = {
    'a': [-34.91855239868164, -29.96919059753418, -31.51621437072754, -32.84787368774414, -33.82530212402344, -30.28936195373535, -27.019723892211914, -28.904918670654297, -33.06915283203125, -33.505863189697266, -31.52540397644043, -35.281288146972656, -43.066017150878906, -46.68452453613281, -45.808311462402344, -44.31525802612305, -47.14008331298828, -49.07640075683594, -46.719364166259766, -48.409767150878906, -55.07437515258789, -58.503631591796875, -60.0622673034668, -61.0283088684082, -62.29351043701172, -64.59580993652344],
    'e': [-34.08517837524414, -27.828216552734375, -28.98374366760254, -28.958019256591797, -27.65566062927246, -26.427274703979492, -31.79404640197754, -39.910457611083984, -43.79119873046875, -45.88751983642578, -45.4957275390625, -40.9212760925293, -37.46671676635742, -40.15625, -42.15260696411133, -39.4786376953125, -42.40653610229492, -45.61090850830078, -43.63672637939453, -46.08161163330078, -53.059486389160156, -58.415470123291016, -59.51259994506836, -59.565120697021484, -61.186241149902344, -64.38722229003906],
    'i': [-35.49113464355469, -27.937387466430664, -27.63886833190918, -29.01075553894043, -37.05130386352539, -46.40263748168945, -54.750492095947266, -58.57257843017578, -60.22258758544922, -61.89786911010742, -63.339935302734375, -63.03710174560547, -60.39494705200195, -52.31024169921875, -45.665245056152344, -46.616493225097656, -46.1152458190918, -45.11946487426758, -44.09151077270508, -48.8131103515625, -57.21633529663086, -61.75661087036133, -61.59124755859375, -61.86732482910156, -63.283599853515625, -65.8952407836914],
    'o': [-34.732582092285156, -28.38743782043457, -29.485361099243164, -29.232421875, -27.213062286376953, -24.788007736206055, -28.369112014770508, -33.81197738647461, -32.78478240966797, -33.236454010009766, -41.08308029174805, -49.17912673950195, -53.13119125366211, -53.526065826416016, -51.095603942871094, -49.50736618041992, -51.294898986816406, -49.99513244628906, -47.407203674316406, -51.362064361572266, -57.72175598144531, -60.47132110595703, -61.929534912109375, -62.17754364013672, -62.807186126708984, -65.35565185546875],
    'u': [-34.492401123046875, -27.129735946655273, -26.638202667236328, -24.673301696777344, -26.726083755493164, -33.57516860961914, -40.09123229980469, -41.324806213378906, -42.94850540161133, -47.14736557006836, -52.97861862182617, -58.0059928894043, -60.43083190917969, -59.767112731933594, -56.7427978515625, -56.19822311401367, -58.24436569213867, -55.903690338134766, -54.619728088378906, -58.29932403564453, -63.25448226928711, -65.30933380126953, -64.44878387451172, -63.97486877441406, -65.01309967041016, -67.20164489746094],
    'y': [-34.97027587890625, -27.34699249267578, -27.604270935058594, -25.825241088867188, -26.569894790649414, -32.671470642089844, -43.306427001953125, -48.01935958862305, -50.25289535522461, -51.431575775146484, -50.776145935058594, -46.706382751464844, -42.50223922729492, -43.557708740234375, -44.91866683959961, -42.71783447265625, -46.1708984375, -47.986061096191406, -45.929237365722656, -49.492183685302734, -56.492088317871094, -61.09080123901367, -60.797584533691406, -60.988075256347656, -62.49946594238281, -65.63141632080078],
    'sil': [-48.640987396240234, -49.91140365600586, -55.46495056152344, -60.41654968261719, -63.45148468017578, -64.77118682861328, -65.26160430908203, -65.55977630615234, -66.22708892822266, -66.40753936767578, -66.63143920898438, -67.30722045898438, -67.85279083251953, -68.47560119628906, -68.60922241210938, -68.70209503173828, -68.71251678466797, -68.8876953125, -68.77688598632812, -68.896728515625, -69.12359619140625, -69.2287368774414, -69.431640625, -69.59009552001953, -69.7044677734375, -69.83455657958984],
}

mean_mel_dc = dict([ (label, sum(values[:14]) / 14.) for (label, values) in mean_mel_shape.iteritems() ])

shape_weights = np.interp(xrange(26), [0,13,17,25], [1,1,0,0])

def select_shape(frames):
    label = frames[0].group_header.label
    target_shape = mean_mel_shape[label]
    target_dc = mean_mel_dc[label]

    best = None
    besti = None
    score = 1000000000
    for i, frame in enumerate(frames):
        dc = sum(frame.mel_powers[:14]) / 14.
        diff = np.subtract(frame.mel_powers, target_shape) - dc + target_dc
        diff *= shape_weights
        s = diff.dot(diff)
        if s < score:
            score = s
            best = frame
            besti = i

    return score, best, besti

def select_stationary(frames):
    best = None
    besti = None
    score = 1000000000
    n = len(frames)

    for i,f1,f2,f3 in itertools.izip(itertools.count(1), frames, frames[1:], frames[2:]):
        d12 = np.subtract(f1.mel_powers, f2.mel_powers)
        d32 = np.subtract(f3.mel_powers, f2.mel_powers)
        s = d12.dot(d12) + d32.dot(d32) + 15. * abs(2.*i/n - 1.)

        if s < score:
            score = s
            best = f2
            besti = i

    return score, best, besti

def main():
    if len(sys.argv) != 3:
        sys.stderr.write('USAGE: extract-vowels.py [input mfcc file] [output mfcc file]\n')
        sys.exit(1)

    in_file = open(sys.argv[1], 'rb') if sys.argv[1] != '-' else sys.stdin
    reader = MFCCReader(in_file)

    out_file = open(sys.argv[2], 'wb') if sys.argv[2] != '-' else sys.stdout
    writer = MFCCWriter(out_file)

    vowels = ('a','e','o','u','i','y','sil')

    try:
        packet = next(reader)
        while True:
            if isinstance(packet, ProfilePacket):
                writer.write(packet)
                packet = next(reader)
                continue

            if not isinstance(packet, GroupHeaderPacket) or \
               packet.label not in vowels or \
               packet.filename[3:5] != 'm1':
                packet = next(reader)
                continue

            group_header = packet

            frames = []
            while True:
                packet = next(reader)
                if not isinstance(packet, FramePacket):
                    break
                frames.append(packet)

            if len(frames) < 3:
                print 'label %s from file %s did not have three consecutive packets!' % \
                    (group_header.label, group_header.filename)
                continue

            n = len(frames)
            #score, best, besti = select_stationary(frames)
            score, best, besti = select_shape(frames)

            group_header = group_header._replace(sample_offset = best.sample_offset)
            writer.write(group_header)
            writer.write(best)

            print 'file %s, label %s: score: %f; frame %d of %d' % \
                (group_header.filename, group_header.label, score, besti, n)

    except StopIteration:
        pass

if __name__ == '__main__':
    main()

